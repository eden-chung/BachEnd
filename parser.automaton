State 0:
## Known stack suffix:
##
## LR(1) items:
program' -> . program [ # ]
## Transitions:
-- On STRING shift to state 1
-- On NOTE shift to state 2
-- On INT shift to state 3
-- On BOOL shift to state 4
-- On vdecl shift to state 5
-- On typ shift to state 7
-- On program shift to state 91
-- On fdecl shift to state 10
-- On decls shift to state 92
## Reductions:
-- On EOF
--   reduce production decls ->

State 1:
## Known stack suffix:
## STRING
## LR(1) items:
typ -> STRING . [ ID ]
## Transitions:
## Reductions:
-- On ID
--   reduce production typ -> STRING

State 2:
## Known stack suffix:
## NOTE
## LR(1) items:
typ -> NOTE . [ ID ]
## Transitions:
## Reductions:
-- On ID
--   reduce production typ -> NOTE

State 3:
## Known stack suffix:
## INT
## LR(1) items:
typ -> INT . [ ID ]
## Transitions:
## Reductions:
-- On ID
--   reduce production typ -> INT

State 4:
## Known stack suffix:
## BOOL
## LR(1) items:
typ -> BOOL . [ ID ]
## Transitions:
## Reductions:
-- On ID
--   reduce production typ -> BOOL

State 5:
## Known stack suffix:
## vdecl
## LR(1) items:
decls -> vdecl . SEMI decls [ EOF ]
fdecl -> vdecl . LPAREN formals_opt RPAREN LBRACE vdecl_list stmt_list RBRACE [ STRING NOTE INT EOF BOOL ]
## Transitions:
-- On SEMI shift to state 6
-- On LPAREN shift to state 13
## Reductions:

State 6:
## Known stack suffix:
## vdecl SEMI
## LR(1) items:
decls -> vdecl SEMI . decls [ EOF ]
## Transitions:
-- On STRING shift to state 1
-- On NOTE shift to state 2
-- On INT shift to state 3
-- On BOOL shift to state 4
-- On vdecl shift to state 5
-- On typ shift to state 7
-- On fdecl shift to state 10
-- On decls shift to state 12
## Reductions:
-- On EOF
--   reduce production decls ->

State 7:
## Known stack suffix:
## typ
## LR(1) items:
vdecl -> typ . ID EXCLAMATION [ SEMI RPAREN LPAREN COMMA ]
## Transitions:
-- On ID shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## typ ID
## LR(1) items:
vdecl -> typ ID . EXCLAMATION [ SEMI RPAREN LPAREN COMMA ]
## Transitions:
-- On EXCLAMATION shift to state 9
## Reductions:

State 9:
## Known stack suffix:
## typ ID EXCLAMATION
## LR(1) items:
vdecl -> typ ID EXCLAMATION . [ SEMI RPAREN LPAREN COMMA ]
## Transitions:
## Reductions:
-- On SEMI RPAREN LPAREN COMMA
--   reduce production vdecl -> typ ID EXCLAMATION

State 10:
## Known stack suffix:
## fdecl
## LR(1) items:
decls -> fdecl . decls [ EOF ]
## Transitions:
-- On STRING shift to state 1
-- On NOTE shift to state 2
-- On INT shift to state 3
-- On BOOL shift to state 4
-- On vdecl shift to state 5
-- On typ shift to state 7
-- On fdecl shift to state 10
-- On decls shift to state 11
## Reductions:
-- On EOF
--   reduce production decls ->

State 11:
## Known stack suffix:
## fdecl decls
## LR(1) items:
decls -> fdecl decls . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production decls -> fdecl decls

State 12:
## Known stack suffix:
## vdecl SEMI decls
## LR(1) items:
decls -> vdecl SEMI decls . [ EOF ]
## Transitions:
## Reductions:
-- On EOF
--   reduce production decls -> vdecl SEMI decls

State 13:
## Known stack suffix:
## vdecl LPAREN
## LR(1) items:
fdecl -> vdecl LPAREN . formals_opt RPAREN LBRACE vdecl_list stmt_list RBRACE [ STRING NOTE INT EOF BOOL ]
## Transitions:
-- On STRING shift to state 1
-- On NOTE shift to state 2
-- On INT shift to state 3
-- On BOOL shift to state 4
-- On vdecl shift to state 14
-- On typ shift to state 7
-- On formals_opt shift to state 17
-- On formals_list shift to state 90
## Reductions:
-- On RPAREN
--   reduce production formals_opt ->

State 14:
## Known stack suffix:
## vdecl
## LR(1) items:
formals_list -> vdecl . [ RPAREN ]
formals_list -> vdecl . COMMA formals_list [ RPAREN ]
## Transitions:
-- On COMMA shift to state 15
## Reductions:
-- On RPAREN
--   reduce production formals_list -> vdecl

State 15:
## Known stack suffix:
## vdecl COMMA
## LR(1) items:
formals_list -> vdecl COMMA . formals_list [ RPAREN ]
## Transitions:
-- On STRING shift to state 1
-- On NOTE shift to state 2
-- On INT shift to state 3
-- On BOOL shift to state 4
-- On vdecl shift to state 14
-- On typ shift to state 7
-- On formals_list shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## vdecl COMMA formals_list
## LR(1) items:
formals_list -> vdecl COMMA formals_list . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production formals_list -> vdecl COMMA formals_list

State 17:
## Known stack suffix:
## vdecl LPAREN formals_opt
## LR(1) items:
fdecl -> vdecl LPAREN formals_opt . RPAREN LBRACE vdecl_list stmt_list RBRACE [ STRING NOTE INT EOF BOOL ]
## Transitions:
-- On RPAREN shift to state 18
## Reductions:

State 18:
## Known stack suffix:
## vdecl LPAREN formals_opt RPAREN
## LR(1) items:
fdecl -> vdecl LPAREN formals_opt RPAREN . LBRACE vdecl_list stmt_list RBRACE [ STRING NOTE INT EOF BOOL ]
## Transitions:
-- On LBRACE shift to state 19
## Reductions:

State 19:
## Known stack suffix:
## vdecl LPAREN formals_opt RPAREN LBRACE
## LR(1) items:
fdecl -> vdecl LPAREN formals_opt RPAREN LBRACE . vdecl_list stmt_list RBRACE [ STRING NOTE INT EOF BOOL ]
## Transitions:
-- On STRING shift to state 1
-- On NOTE shift to state 2
-- On INT shift to state 3
-- On BOOL shift to state 4
-- On vdecl_list shift to state 20
-- On vdecl shift to state 87
-- On typ shift to state 7
## Reductions:
-- On WHILE RETURN RBRACE NOTELIT NOT LPAREN LITERAL LBRACE IF ID BLIT
--   reduce production vdecl_list ->

State 20:
## Known stack suffix:
## vdecl LPAREN formals_opt RPAREN LBRACE vdecl_list
## LR(1) items:
fdecl -> vdecl LPAREN formals_opt RPAREN LBRACE vdecl_list . stmt_list RBRACE [ STRING NOTE INT EOF BOOL ]
## Transitions:
-- On WHILE shift to state 21
-- On RETURN shift to state 67
-- On NOTELIT shift to state 23
-- On NOT shift to state 24
-- On LPAREN shift to state 25
-- On LITERAL shift to state 26
-- On LBRACE shift to state 70
-- On IF shift to state 71
-- On ID shift to state 27
-- On BLIT shift to state 29
-- On stmt_list shift to state 85
-- On stmt shift to state 82
-- On expr shift to state 78
## Reductions:
-- On RBRACE
--   reduce production stmt_list ->

State 21:
## Known stack suffix:
## WHILE
## LR(1) items:
stmt -> WHILE . LPAREN expr RPAREN stmt [ WHILE RETURN RBRACE NOTELIT NOT LPAREN LITERAL LBRACE IF ID ELSE BLIT ]
## Transitions:
-- On LPAREN shift to state 22
## Reductions:

State 22:
## Known stack suffix:
## WHILE LPAREN
## LR(1) items:
stmt -> WHILE LPAREN . expr RPAREN stmt [ WHILE RETURN RBRACE NOTELIT NOT LPAREN LITERAL LBRACE IF ID ELSE BLIT ]
## Transitions:
-- On NOTELIT shift to state 23
-- On NOT shift to state 24
-- On LPAREN shift to state 25
-- On LITERAL shift to state 26
-- On ID shift to state 27
-- On BLIT shift to state 29
-- On expr shift to state 65
## Reductions:

State 23:
## Known stack suffix:
## NOTELIT
## LR(1) items:
expr -> NOTELIT . [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
## Reductions:
-- On TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND
--   reduce production expr -> NOTELIT

State 24:
## Known stack suffix:
## NOT
## LR(1) items:
expr -> NOT . expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
-- On NOTELIT shift to state 23
-- On NOT shift to state 24
-- On LPAREN shift to state 25
-- On LITERAL shift to state 26
-- On ID shift to state 27
-- On BLIT shift to state 29
-- On expr shift to state 64
## Reductions:

State 25:
## Known stack suffix:
## LPAREN
## LR(1) items:
expr -> LPAREN . expr RPAREN [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
-- On NOTELIT shift to state 23
-- On NOT shift to state 24
-- On LPAREN shift to state 25
-- On LITERAL shift to state 26
-- On ID shift to state 27
-- On BLIT shift to state 29
-- On expr shift to state 62
## Reductions:

State 26:
## Known stack suffix:
## LITERAL
## LR(1) items:
expr -> LITERAL . [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
## Reductions:
-- On TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND
--   reduce production expr -> LITERAL

State 27:
## Known stack suffix:
## ID
## LR(1) items:
expr -> ID . [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> ID . ASSIGN expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> ID . LPAREN args_opt RPAREN [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
-- On LPAREN shift to state 28
-- On ASSIGN shift to state 60
## Reductions:
-- On TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND
--   reduce production expr -> ID

State 28:
## Known stack suffix:
## ID LPAREN
## LR(1) items:
expr -> ID LPAREN . args_opt RPAREN [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
-- On NOTELIT shift to state 23
-- On NOT shift to state 24
-- On LPAREN shift to state 25
-- On LITERAL shift to state 26
-- On ID shift to state 27
-- On BLIT shift to state 29
-- On expr shift to state 30
-- On args_opt shift to state 57
-- On args shift to state 59
## Reductions:
-- On RPAREN
--   reduce production args_opt ->

State 29:
## Known stack suffix:
## BLIT
## LR(1) items:
expr -> BLIT . [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
## Reductions:
-- On TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND
--   reduce production expr -> BLIT

State 30:
## Known stack suffix:
## expr
## LR(1) items:
args -> expr . [ RPAREN ]
args -> expr . COMMA args [ RPAREN ]
expr -> expr . PLUS expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE COMMA AND ]
expr -> expr . MINUS expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE COMMA AND ]
expr -> expr . TIMES expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE COMMA AND ]
expr -> expr . DIVIDE expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE COMMA AND ]
expr -> expr . EQUAL expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE COMMA AND ]
expr -> expr . NEQ expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE COMMA AND ]
expr -> expr . LEQ expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE COMMA AND ]
expr -> expr . GEQ expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE COMMA AND ]
expr -> expr . LT expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE COMMA AND ]
expr -> expr . GT expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE COMMA AND ]
expr -> expr . AND expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE COMMA AND ]
expr -> expr . OR expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE COMMA AND ]
## Transitions:
-- On TIMES shift to state 31
-- On PLUS shift to state 33
-- On OR shift to state 37
-- On NEQ shift to state 39
-- On MINUS shift to state 35
-- On LT shift to state 41
-- On LEQ shift to state 47
-- On GT shift to state 45
-- On GEQ shift to state 49
-- On EQUAL shift to state 51
-- On DIVIDE shift to state 43
-- On COMMA shift to state 55
-- On AND shift to state 53
## Reductions:
-- On RPAREN
--   reduce production args -> expr

State 31:
## Known stack suffix:
## expr TIMES
## LR(1) items:
expr -> expr TIMES . expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
-- On NOTELIT shift to state 23
-- On NOT shift to state 24
-- On LPAREN shift to state 25
-- On LITERAL shift to state 26
-- On ID shift to state 27
-- On BLIT shift to state 29
-- On expr shift to state 32
## Reductions:

State 32:
## Known stack suffix:
## expr TIMES expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . MINUS expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . TIMES expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr TIMES expr . [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . DIVIDE expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . EQUAL expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . NEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . LEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . GEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . LT expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . GT expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . AND expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . OR expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
-- On PLUS shift to state 33
-- On MINUS shift to state 35
## Reductions:
-- On TIMES SEMI RPAREN OR NEQ LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND
--   reduce production expr -> expr TIMES expr

State 33:
## Known stack suffix:
## expr PLUS
## LR(1) items:
expr -> expr PLUS . expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
-- On NOTELIT shift to state 23
-- On NOT shift to state 24
-- On LPAREN shift to state 25
-- On LITERAL shift to state 26
-- On ID shift to state 27
-- On BLIT shift to state 29
-- On expr shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## expr PLUS expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr PLUS expr . [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . MINUS expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . TIMES expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . DIVIDE expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . EQUAL expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . NEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . LEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . GEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . LT expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . GT expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . AND expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . OR expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
## Reductions:
-- On TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND
--   reduce production expr -> expr PLUS expr

State 35:
## Known stack suffix:
## expr MINUS
## LR(1) items:
expr -> expr MINUS . expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
-- On NOTELIT shift to state 23
-- On NOT shift to state 24
-- On LPAREN shift to state 25
-- On LITERAL shift to state 26
-- On ID shift to state 27
-- On BLIT shift to state 29
-- On expr shift to state 36
## Reductions:

State 36:
## Known stack suffix:
## expr MINUS expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . MINUS expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr MINUS expr . [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . TIMES expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . DIVIDE expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . EQUAL expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . NEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . LEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . GEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . LT expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . GT expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . AND expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . OR expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
## Reductions:
-- On TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND
--   reduce production expr -> expr MINUS expr

State 37:
## Known stack suffix:
## expr OR
## LR(1) items:
expr -> expr OR . expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
-- On NOTELIT shift to state 23
-- On NOT shift to state 24
-- On LPAREN shift to state 25
-- On LITERAL shift to state 26
-- On ID shift to state 27
-- On BLIT shift to state 29
-- On expr shift to state 38
## Reductions:

State 38:
## Known stack suffix:
## expr OR expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . MINUS expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . TIMES expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . DIVIDE expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . EQUAL expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . NEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . LEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . GEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . LT expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . GT expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . AND expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . OR expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr OR expr . [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
-- On TIMES shift to state 31
-- On PLUS shift to state 33
-- On NEQ shift to state 39
-- On MINUS shift to state 35
-- On LT shift to state 41
-- On LEQ shift to state 47
-- On GT shift to state 45
-- On GEQ shift to state 49
-- On EQUAL shift to state 51
-- On DIVIDE shift to state 43
-- On AND shift to state 53
## Reductions:
-- On SEMI RPAREN OR EXCLAMATION COMMA
--   reduce production expr -> expr OR expr

State 39:
## Known stack suffix:
## expr NEQ
## LR(1) items:
expr -> expr NEQ . expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
-- On NOTELIT shift to state 23
-- On NOT shift to state 24
-- On LPAREN shift to state 25
-- On LITERAL shift to state 26
-- On ID shift to state 27
-- On BLIT shift to state 29
-- On expr shift to state 40
## Reductions:

State 40:
## Known stack suffix:
## expr NEQ expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . MINUS expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . TIMES expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . DIVIDE expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . EQUAL expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . NEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr NEQ expr . [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . LEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . GEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . LT expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . GT expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . AND expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . OR expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
-- On TIMES shift to state 31
-- On PLUS shift to state 33
-- On MINUS shift to state 35
-- On LT shift to state 41
-- On GT shift to state 45
-- On DIVIDE shift to state 43
## Reductions:
-- On SEMI RPAREN OR NEQ LEQ GEQ EXCLAMATION EQUAL COMMA AND
--   reduce production expr -> expr NEQ expr

State 41:
## Known stack suffix:
## expr LT
## LR(1) items:
expr -> expr LT . expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
-- On NOTELIT shift to state 23
-- On NOT shift to state 24
-- On LPAREN shift to state 25
-- On LITERAL shift to state 26
-- On ID shift to state 27
-- On BLIT shift to state 29
-- On expr shift to state 42
## Reductions:

State 42:
## Known stack suffix:
## expr LT expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . MINUS expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . TIMES expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . DIVIDE expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . EQUAL expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . NEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . LEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . GEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . LT expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr LT expr . [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . GT expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . AND expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . OR expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
-- On TIMES shift to state 31
-- On PLUS shift to state 33
-- On MINUS shift to state 35
-- On DIVIDE shift to state 43
## Reductions:
-- On SEMI RPAREN OR NEQ LT LEQ GT GEQ EXCLAMATION EQUAL COMMA AND
--   reduce production expr -> expr LT expr

State 43:
## Known stack suffix:
## expr DIVIDE
## LR(1) items:
expr -> expr DIVIDE . expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
-- On NOTELIT shift to state 23
-- On NOT shift to state 24
-- On LPAREN shift to state 25
-- On LITERAL shift to state 26
-- On ID shift to state 27
-- On BLIT shift to state 29
-- On expr shift to state 44
## Reductions:

State 44:
## Known stack suffix:
## expr DIVIDE expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . MINUS expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . TIMES expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . DIVIDE expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr DIVIDE expr . [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . EQUAL expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . NEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . LEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . GEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . LT expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . GT expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . AND expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . OR expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
-- On PLUS shift to state 33
-- On MINUS shift to state 35
## Reductions:
-- On TIMES SEMI RPAREN OR NEQ LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND
--   reduce production expr -> expr DIVIDE expr

State 45:
## Known stack suffix:
## expr GT
## LR(1) items:
expr -> expr GT . expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
-- On NOTELIT shift to state 23
-- On NOT shift to state 24
-- On LPAREN shift to state 25
-- On LITERAL shift to state 26
-- On ID shift to state 27
-- On BLIT shift to state 29
-- On expr shift to state 46
## Reductions:

State 46:
## Known stack suffix:
## expr GT expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . MINUS expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . TIMES expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . DIVIDE expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . EQUAL expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . NEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . LEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . GEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . LT expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . GT expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr GT expr . [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . AND expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . OR expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
-- On TIMES shift to state 31
-- On PLUS shift to state 33
-- On MINUS shift to state 35
-- On DIVIDE shift to state 43
## Reductions:
-- On SEMI RPAREN OR NEQ LT LEQ GT GEQ EXCLAMATION EQUAL COMMA AND
--   reduce production expr -> expr GT expr

State 47:
## Known stack suffix:
## expr LEQ
## LR(1) items:
expr -> expr LEQ . expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
-- On NOTELIT shift to state 23
-- On NOT shift to state 24
-- On LPAREN shift to state 25
-- On LITERAL shift to state 26
-- On ID shift to state 27
-- On BLIT shift to state 29
-- On expr shift to state 48
## Reductions:

State 48:
## Known stack suffix:
## expr LEQ expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . MINUS expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . TIMES expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . DIVIDE expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . EQUAL expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . NEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . LEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr LEQ expr . [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . GEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . LT expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . GT expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . AND expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . OR expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
-- On TIMES shift to state 31
-- On PLUS shift to state 33
-- On MINUS shift to state 35
-- On LT shift to state 41
-- On GT shift to state 45
-- On DIVIDE shift to state 43
## Reductions:
-- On SEMI RPAREN OR NEQ LEQ GEQ EXCLAMATION EQUAL COMMA AND
--   reduce production expr -> expr LEQ expr

State 49:
## Known stack suffix:
## expr GEQ
## LR(1) items:
expr -> expr GEQ . expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
-- On NOTELIT shift to state 23
-- On NOT shift to state 24
-- On LPAREN shift to state 25
-- On LITERAL shift to state 26
-- On ID shift to state 27
-- On BLIT shift to state 29
-- On expr shift to state 50
## Reductions:

State 50:
## Known stack suffix:
## expr GEQ expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . MINUS expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . TIMES expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . DIVIDE expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . EQUAL expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . NEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . LEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . GEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr GEQ expr . [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . LT expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . GT expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . AND expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . OR expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
-- On TIMES shift to state 31
-- On PLUS shift to state 33
-- On MINUS shift to state 35
-- On LT shift to state 41
-- On GT shift to state 45
-- On DIVIDE shift to state 43
## Reductions:
-- On SEMI RPAREN OR NEQ LEQ GEQ EXCLAMATION EQUAL COMMA AND
--   reduce production expr -> expr GEQ expr

State 51:
## Known stack suffix:
## expr EQUAL
## LR(1) items:
expr -> expr EQUAL . expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
-- On NOTELIT shift to state 23
-- On NOT shift to state 24
-- On LPAREN shift to state 25
-- On LITERAL shift to state 26
-- On ID shift to state 27
-- On BLIT shift to state 29
-- On expr shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## expr EQUAL expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . MINUS expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . TIMES expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . DIVIDE expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . EQUAL expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr EQUAL expr . [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . NEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . LEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . GEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . LT expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . GT expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . AND expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . OR expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
-- On TIMES shift to state 31
-- On PLUS shift to state 33
-- On MINUS shift to state 35
-- On LT shift to state 41
-- On GT shift to state 45
-- On DIVIDE shift to state 43
## Reductions:
-- On SEMI RPAREN OR NEQ LEQ GEQ EXCLAMATION EQUAL COMMA AND
--   reduce production expr -> expr EQUAL expr

State 53:
## Known stack suffix:
## expr AND
## LR(1) items:
expr -> expr AND . expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
-- On NOTELIT shift to state 23
-- On NOT shift to state 24
-- On LPAREN shift to state 25
-- On LITERAL shift to state 26
-- On ID shift to state 27
-- On BLIT shift to state 29
-- On expr shift to state 54
## Reductions:

State 54:
## Known stack suffix:
## expr AND expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . MINUS expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . TIMES expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . DIVIDE expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . EQUAL expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . NEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . LEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . GEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . LT expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . GT expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . AND expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr AND expr . [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . OR expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
-- On TIMES shift to state 31
-- On PLUS shift to state 33
-- On NEQ shift to state 39
-- On MINUS shift to state 35
-- On LT shift to state 41
-- On LEQ shift to state 47
-- On GT shift to state 45
-- On GEQ shift to state 49
-- On EQUAL shift to state 51
-- On DIVIDE shift to state 43
## Reductions:
-- On SEMI RPAREN OR EXCLAMATION COMMA AND
--   reduce production expr -> expr AND expr

State 55:
## Known stack suffix:
## expr COMMA
## LR(1) items:
args -> expr COMMA . args [ RPAREN ]
## Transitions:
-- On NOTELIT shift to state 23
-- On NOT shift to state 24
-- On LPAREN shift to state 25
-- On LITERAL shift to state 26
-- On ID shift to state 27
-- On BLIT shift to state 29
-- On expr shift to state 30
-- On args shift to state 56
## Reductions:

State 56:
## Known stack suffix:
## expr COMMA args
## LR(1) items:
args -> expr COMMA args . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production args -> expr COMMA args

State 57:
## Known stack suffix:
## ID LPAREN args_opt
## LR(1) items:
expr -> ID LPAREN args_opt . RPAREN [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
-- On RPAREN shift to state 58
## Reductions:

State 58:
## Known stack suffix:
## ID LPAREN args_opt RPAREN
## LR(1) items:
expr -> ID LPAREN args_opt RPAREN . [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
## Reductions:
-- On TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND
--   reduce production expr -> ID LPAREN args_opt RPAREN

State 59:
## Known stack suffix:
## args
## LR(1) items:
args_opt -> args . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production args_opt -> args

State 60:
## Known stack suffix:
## ID ASSIGN
## LR(1) items:
expr -> ID ASSIGN . expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
-- On NOTELIT shift to state 23
-- On NOT shift to state 24
-- On LPAREN shift to state 25
-- On LITERAL shift to state 26
-- On ID shift to state 27
-- On BLIT shift to state 29
-- On expr shift to state 61
## Reductions:

State 61:
## Known stack suffix:
## ID ASSIGN expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . MINUS expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . TIMES expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . DIVIDE expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . EQUAL expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . NEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . LEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . GEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . LT expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . GT expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . AND expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . OR expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> ID ASSIGN expr . [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
-- On TIMES shift to state 31
-- On PLUS shift to state 33
-- On OR shift to state 37
-- On NEQ shift to state 39
-- On MINUS shift to state 35
-- On LT shift to state 41
-- On LEQ shift to state 47
-- On GT shift to state 45
-- On GEQ shift to state 49
-- On EQUAL shift to state 51
-- On DIVIDE shift to state 43
-- On AND shift to state 53
## Reductions:
-- On SEMI RPAREN EXCLAMATION COMMA
--   reduce production expr -> ID ASSIGN expr

State 62:
## Known stack suffix:
## LPAREN expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . MINUS expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . TIMES expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . DIVIDE expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . EQUAL expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . NEQ expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . LEQ expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . GEQ expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . LT expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . GT expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . AND expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . OR expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> LPAREN expr . RPAREN [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
-- On TIMES shift to state 31
-- On RPAREN shift to state 63
-- On PLUS shift to state 33
-- On OR shift to state 37
-- On NEQ shift to state 39
-- On MINUS shift to state 35
-- On LT shift to state 41
-- On LEQ shift to state 47
-- On GT shift to state 45
-- On GEQ shift to state 49
-- On EQUAL shift to state 51
-- On DIVIDE shift to state 43
-- On AND shift to state 53
## Reductions:

State 63:
## Known stack suffix:
## LPAREN expr RPAREN
## LR(1) items:
expr -> LPAREN expr RPAREN . [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
## Reductions:
-- On TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND
--   reduce production expr -> LPAREN expr RPAREN

State 64:
## Known stack suffix:
## NOT expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . MINUS expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . TIMES expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . DIVIDE expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . EQUAL expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . NEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . LEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . GEQ expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . LT expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . GT expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . AND expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> expr . OR expr [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
expr -> NOT expr . [ TIMES SEMI RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE COMMA AND ]
## Transitions:
-- On TIMES shift to state 31
-- On PLUS shift to state 33
-- On OR shift to state 37
-- On NEQ shift to state 39
-- On MINUS shift to state 35
-- On LT shift to state 41
-- On LEQ shift to state 47
-- On GT shift to state 45
-- On GEQ shift to state 49
-- On EQUAL shift to state 51
-- On DIVIDE shift to state 43
-- On AND shift to state 53
## Reductions:
-- On SEMI RPAREN EXCLAMATION COMMA
--   reduce production expr -> NOT expr

State 65:
## Known stack suffix:
## WHILE LPAREN expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . MINUS expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . TIMES expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . DIVIDE expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . EQUAL expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . NEQ expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . LEQ expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . GEQ expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . LT expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . GT expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . AND expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . OR expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
stmt -> WHILE LPAREN expr . RPAREN stmt [ WHILE RETURN RBRACE NOTELIT NOT LPAREN LITERAL LBRACE IF ID ELSE BLIT ]
## Transitions:
-- On TIMES shift to state 31
-- On RPAREN shift to state 66
-- On PLUS shift to state 33
-- On OR shift to state 37
-- On NEQ shift to state 39
-- On MINUS shift to state 35
-- On LT shift to state 41
-- On LEQ shift to state 47
-- On GT shift to state 45
-- On GEQ shift to state 49
-- On EQUAL shift to state 51
-- On DIVIDE shift to state 43
-- On AND shift to state 53
## Reductions:

State 66:
## Known stack suffix:
## WHILE LPAREN expr RPAREN
## LR(1) items:
stmt -> WHILE LPAREN expr RPAREN . stmt [ WHILE RETURN RBRACE NOTELIT NOT LPAREN LITERAL LBRACE IF ID ELSE BLIT ]
## Transitions:
-- On WHILE shift to state 21
-- On RETURN shift to state 67
-- On NOTELIT shift to state 23
-- On NOT shift to state 24
-- On LPAREN shift to state 25
-- On LITERAL shift to state 26
-- On LBRACE shift to state 70
-- On IF shift to state 71
-- On ID shift to state 27
-- On BLIT shift to state 29
-- On stmt shift to state 84
-- On expr shift to state 78
## Reductions:

State 67:
## Known stack suffix:
## RETURN
## LR(1) items:
stmt -> RETURN . expr SEMI [ WHILE RETURN RBRACE NOTELIT NOT LPAREN LITERAL LBRACE IF ID ELSE BLIT ]
## Transitions:
-- On NOTELIT shift to state 23
-- On NOT shift to state 24
-- On LPAREN shift to state 25
-- On LITERAL shift to state 26
-- On ID shift to state 27
-- On BLIT shift to state 29
-- On expr shift to state 68
## Reductions:

State 68:
## Known stack suffix:
## RETURN expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . MINUS expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . TIMES expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . DIVIDE expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . EQUAL expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . NEQ expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . LEQ expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . GEQ expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . LT expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . GT expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . AND expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . OR expr [ TIMES SEMI PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
stmt -> RETURN expr . SEMI [ WHILE RETURN RBRACE NOTELIT NOT LPAREN LITERAL LBRACE IF ID ELSE BLIT ]
## Transitions:
-- On TIMES shift to state 31
-- On SEMI shift to state 69
-- On PLUS shift to state 33
-- On OR shift to state 37
-- On NEQ shift to state 39
-- On MINUS shift to state 35
-- On LT shift to state 41
-- On LEQ shift to state 47
-- On GT shift to state 45
-- On GEQ shift to state 49
-- On EQUAL shift to state 51
-- On DIVIDE shift to state 43
-- On AND shift to state 53
## Reductions:

State 69:
## Known stack suffix:
## RETURN expr SEMI
## LR(1) items:
stmt -> RETURN expr SEMI . [ WHILE RETURN RBRACE NOTELIT NOT LPAREN LITERAL LBRACE IF ID ELSE BLIT ]
## Transitions:
## Reductions:
-- On WHILE RETURN RBRACE NOTELIT NOT LPAREN LITERAL LBRACE IF ID ELSE BLIT
--   reduce production stmt -> RETURN expr SEMI

State 70:
## Known stack suffix:
## LBRACE
## LR(1) items:
stmt -> LBRACE . stmt_list RBRACE [ WHILE RETURN RBRACE NOTELIT NOT LPAREN LITERAL LBRACE IF ID ELSE BLIT ]
## Transitions:
-- On WHILE shift to state 21
-- On RETURN shift to state 67
-- On NOTELIT shift to state 23
-- On NOT shift to state 24
-- On LPAREN shift to state 25
-- On LITERAL shift to state 26
-- On LBRACE shift to state 70
-- On IF shift to state 71
-- On ID shift to state 27
-- On BLIT shift to state 29
-- On stmt_list shift to state 80
-- On stmt shift to state 82
-- On expr shift to state 78
## Reductions:
-- On RBRACE
--   reduce production stmt_list ->

State 71:
## Known stack suffix:
## IF
## LR(1) items:
stmt -> IF . LPAREN expr RPAREN stmt ELSE stmt [ WHILE RETURN RBRACE NOTELIT NOT LPAREN LITERAL LBRACE IF ID ELSE BLIT ]
## Transitions:
-- On LPAREN shift to state 72
## Reductions:

State 72:
## Known stack suffix:
## IF LPAREN
## LR(1) items:
stmt -> IF LPAREN . expr RPAREN stmt ELSE stmt [ WHILE RETURN RBRACE NOTELIT NOT LPAREN LITERAL LBRACE IF ID ELSE BLIT ]
## Transitions:
-- On NOTELIT shift to state 23
-- On NOT shift to state 24
-- On LPAREN shift to state 25
-- On LITERAL shift to state 26
-- On ID shift to state 27
-- On BLIT shift to state 29
-- On expr shift to state 73
## Reductions:

State 73:
## Known stack suffix:
## IF LPAREN expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . MINUS expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . TIMES expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . DIVIDE expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . EQUAL expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . NEQ expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . LEQ expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . GEQ expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . LT expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . GT expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . AND expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
expr -> expr . OR expr [ TIMES RPAREN PLUS OR NEQ MINUS LT LEQ GT GEQ EQUAL DIVIDE AND ]
stmt -> IF LPAREN expr . RPAREN stmt ELSE stmt [ WHILE RETURN RBRACE NOTELIT NOT LPAREN LITERAL LBRACE IF ID ELSE BLIT ]
## Transitions:
-- On TIMES shift to state 31
-- On RPAREN shift to state 74
-- On PLUS shift to state 33
-- On OR shift to state 37
-- On NEQ shift to state 39
-- On MINUS shift to state 35
-- On LT shift to state 41
-- On LEQ shift to state 47
-- On GT shift to state 45
-- On GEQ shift to state 49
-- On EQUAL shift to state 51
-- On DIVIDE shift to state 43
-- On AND shift to state 53
## Reductions:

State 74:
## Known stack suffix:
## IF LPAREN expr RPAREN
## LR(1) items:
stmt -> IF LPAREN expr RPAREN . stmt ELSE stmt [ WHILE RETURN RBRACE NOTELIT NOT LPAREN LITERAL LBRACE IF ID ELSE BLIT ]
## Transitions:
-- On WHILE shift to state 21
-- On RETURN shift to state 67
-- On NOTELIT shift to state 23
-- On NOT shift to state 24
-- On LPAREN shift to state 25
-- On LITERAL shift to state 26
-- On LBRACE shift to state 70
-- On IF shift to state 71
-- On ID shift to state 27
-- On BLIT shift to state 29
-- On stmt shift to state 75
-- On expr shift to state 78
## Reductions:

State 75:
## Known stack suffix:
## IF LPAREN expr RPAREN stmt
## LR(1) items:
stmt -> IF LPAREN expr RPAREN stmt . ELSE stmt [ WHILE RETURN RBRACE NOTELIT NOT LPAREN LITERAL LBRACE IF ID ELSE BLIT ]
## Transitions:
-- On ELSE shift to state 76
## Reductions:

State 76:
## Known stack suffix:
## IF LPAREN expr RPAREN stmt ELSE
## LR(1) items:
stmt -> IF LPAREN expr RPAREN stmt ELSE . stmt [ WHILE RETURN RBRACE NOTELIT NOT LPAREN LITERAL LBRACE IF ID ELSE BLIT ]
## Transitions:
-- On WHILE shift to state 21
-- On RETURN shift to state 67
-- On NOTELIT shift to state 23
-- On NOT shift to state 24
-- On LPAREN shift to state 25
-- On LITERAL shift to state 26
-- On LBRACE shift to state 70
-- On IF shift to state 71
-- On ID shift to state 27
-- On BLIT shift to state 29
-- On stmt shift to state 77
-- On expr shift to state 78
## Reductions:

State 77:
## Known stack suffix:
## IF LPAREN expr RPAREN stmt ELSE stmt
## LR(1) items:
stmt -> IF LPAREN expr RPAREN stmt ELSE stmt . [ WHILE RETURN RBRACE NOTELIT NOT LPAREN LITERAL LBRACE IF ID ELSE BLIT ]
## Transitions:
## Reductions:
-- On WHILE RETURN RBRACE NOTELIT NOT LPAREN LITERAL LBRACE IF ID ELSE BLIT
--   reduce production stmt -> IF LPAREN expr RPAREN stmt ELSE stmt

State 78:
## Known stack suffix:
## expr
## LR(1) items:
expr -> expr . PLUS expr [ TIMES PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE AND ]
expr -> expr . MINUS expr [ TIMES PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE AND ]
expr -> expr . TIMES expr [ TIMES PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE AND ]
expr -> expr . DIVIDE expr [ TIMES PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE AND ]
expr -> expr . EQUAL expr [ TIMES PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE AND ]
expr -> expr . NEQ expr [ TIMES PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE AND ]
expr -> expr . LEQ expr [ TIMES PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE AND ]
expr -> expr . GEQ expr [ TIMES PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE AND ]
expr -> expr . LT expr [ TIMES PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE AND ]
expr -> expr . GT expr [ TIMES PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE AND ]
expr -> expr . AND expr [ TIMES PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE AND ]
expr -> expr . OR expr [ TIMES PLUS OR NEQ MINUS LT LEQ GT GEQ EXCLAMATION EQUAL DIVIDE AND ]
stmt -> expr . EXCLAMATION [ WHILE RETURN RBRACE NOTELIT NOT LPAREN LITERAL LBRACE IF ID ELSE BLIT ]
## Transitions:
-- On TIMES shift to state 31
-- On PLUS shift to state 33
-- On OR shift to state 37
-- On NEQ shift to state 39
-- On MINUS shift to state 35
-- On LT shift to state 41
-- On LEQ shift to state 47
-- On GT shift to state 45
-- On GEQ shift to state 49
-- On EXCLAMATION shift to state 79
-- On EQUAL shift to state 51
-- On DIVIDE shift to state 43
-- On AND shift to state 53
## Reductions:

State 79:
## Known stack suffix:
## expr EXCLAMATION
## LR(1) items:
stmt -> expr EXCLAMATION . [ WHILE RETURN RBRACE NOTELIT NOT LPAREN LITERAL LBRACE IF ID ELSE BLIT ]
## Transitions:
## Reductions:
-- On WHILE RETURN RBRACE NOTELIT NOT LPAREN LITERAL LBRACE IF ID ELSE BLIT
--   reduce production stmt -> expr EXCLAMATION

State 80:
## Known stack suffix:
## LBRACE stmt_list
## LR(1) items:
stmt -> LBRACE stmt_list . RBRACE [ WHILE RETURN RBRACE NOTELIT NOT LPAREN LITERAL LBRACE IF ID ELSE BLIT ]
## Transitions:
-- On RBRACE shift to state 81
## Reductions:

State 81:
## Known stack suffix:
## LBRACE stmt_list RBRACE
## LR(1) items:
stmt -> LBRACE stmt_list RBRACE . [ WHILE RETURN RBRACE NOTELIT NOT LPAREN LITERAL LBRACE IF ID ELSE BLIT ]
## Transitions:
## Reductions:
-- On WHILE RETURN RBRACE NOTELIT NOT LPAREN LITERAL LBRACE IF ID ELSE BLIT
--   reduce production stmt -> LBRACE stmt_list RBRACE

State 82:
## Known stack suffix:
## stmt
## LR(1) items:
stmt_list -> stmt . stmt_list [ RBRACE ]
## Transitions:
-- On WHILE shift to state 21
-- On RETURN shift to state 67
-- On NOTELIT shift to state 23
-- On NOT shift to state 24
-- On LPAREN shift to state 25
-- On LITERAL shift to state 26
-- On LBRACE shift to state 70
-- On IF shift to state 71
-- On ID shift to state 27
-- On BLIT shift to state 29
-- On stmt_list shift to state 83
-- On stmt shift to state 82
-- On expr shift to state 78
## Reductions:
-- On RBRACE
--   reduce production stmt_list ->

State 83:
## Known stack suffix:
## stmt stmt_list
## LR(1) items:
stmt_list -> stmt stmt_list . [ RBRACE ]
## Transitions:
## Reductions:
-- On RBRACE
--   reduce production stmt_list -> stmt stmt_list

State 84:
## Known stack suffix:
## WHILE LPAREN expr RPAREN stmt
## LR(1) items:
stmt -> WHILE LPAREN expr RPAREN stmt . [ WHILE RETURN RBRACE NOTELIT NOT LPAREN LITERAL LBRACE IF ID ELSE BLIT ]
## Transitions:
## Reductions:
-- On WHILE RETURN RBRACE NOTELIT NOT LPAREN LITERAL LBRACE IF ID ELSE BLIT
--   reduce production stmt -> WHILE LPAREN expr RPAREN stmt

State 85:
## Known stack suffix:
## vdecl LPAREN formals_opt RPAREN LBRACE vdecl_list stmt_list
## LR(1) items:
fdecl -> vdecl LPAREN formals_opt RPAREN LBRACE vdecl_list stmt_list . RBRACE [ STRING NOTE INT EOF BOOL ]
## Transitions:
-- On RBRACE shift to state 86
## Reductions:

State 86:
## Known stack suffix:
## vdecl LPAREN formals_opt RPAREN LBRACE vdecl_list stmt_list RBRACE
## LR(1) items:
fdecl -> vdecl LPAREN formals_opt RPAREN LBRACE vdecl_list stmt_list RBRACE . [ STRING NOTE INT EOF BOOL ]
## Transitions:
## Reductions:
-- On STRING NOTE INT EOF BOOL
--   reduce production fdecl -> vdecl LPAREN formals_opt RPAREN LBRACE vdecl_list stmt_list RBRACE

State 87:
## Known stack suffix:
## vdecl
## LR(1) items:
vdecl_list -> vdecl . SEMI vdecl_list [ WHILE RETURN RBRACE NOTELIT NOT LPAREN LITERAL LBRACE IF ID BLIT ]
## Transitions:
-- On SEMI shift to state 88
## Reductions:

State 88:
## Known stack suffix:
## vdecl SEMI
## LR(1) items:
vdecl_list -> vdecl SEMI . vdecl_list [ WHILE RETURN RBRACE NOTELIT NOT LPAREN LITERAL LBRACE IF ID BLIT ]
## Transitions:
-- On STRING shift to state 1
-- On NOTE shift to state 2
-- On INT shift to state 3
-- On BOOL shift to state 4
-- On vdecl_list shift to state 89
-- On vdecl shift to state 87
-- On typ shift to state 7
## Reductions:
-- On WHILE RETURN RBRACE NOTELIT NOT LPAREN LITERAL LBRACE IF ID BLIT
--   reduce production vdecl_list ->

State 89:
## Known stack suffix:
## vdecl SEMI vdecl_list
## LR(1) items:
vdecl_list -> vdecl SEMI vdecl_list . [ WHILE RETURN RBRACE NOTELIT NOT LPAREN LITERAL LBRACE IF ID BLIT ]
## Transitions:
## Reductions:
-- On WHILE RETURN RBRACE NOTELIT NOT LPAREN LITERAL LBRACE IF ID BLIT
--   reduce production vdecl_list -> vdecl SEMI vdecl_list

State 90:
## Known stack suffix:
## formals_list
## LR(1) items:
formals_opt -> formals_list . [ RPAREN ]
## Transitions:
## Reductions:
-- On RPAREN
--   reduce production formals_opt -> formals_list

State 91:
## Known stack suffix:
## program
## LR(1) items:
program' -> program . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept program

State 92:
## Known stack suffix:
## decls
## LR(1) items:
program -> decls . EOF [ # ]
## Transitions:
-- On EOF shift to state 93
## Reductions:

State 93:
## Known stack suffix:
## decls EOF
## LR(1) items:
program -> decls EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production program -> decls EOF

