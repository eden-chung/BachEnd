Test 1: simple function
  Semantic check passed ✅
\version "2.24.2"
\score { \new Staff { \clef treble \time 4/4 \tempo 4 = 100

  } }

  IR generation passed ✅
--- Generated LLVM IR ---
; ModuleID = 'MicroC'
source_filename = "MicroC"

@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

declare i32 @printf(i8*, ...)

define i32 @main(i32 %x) {
entry:
  %x1 = alloca i32, align 4
  store i32 %x, i32* %x1, align 4
  %y = alloca i32, align 4
  store i32 5, i32* %y, align 4
  %x2 = load i32, i32* %x1, align 4
  ret i32 %x2
}

--- End of IR ---
Test 2: type mismatch assignment
  Test failed ❌: illegal assignment int = bool in y = true
Test 3: repeat loop
  Semantic check passed ✅
\version "2.24.2"
\score { \new Staff { \clef treble \time 4/4 \tempo 4 = 100

  } }

  IR generation passed ✅
--- Generated LLVM IR ---
; ModuleID = 'MicroC'
source_filename = "MicroC"

@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

declare i32 @printf(i8*, ...)

define i32 @main() {
entry:
  %i = alloca i32, align 4
  ret i32 0
}

--- End of IR ---
Test 4: non-int repeat
  Test failed ❌: repeat requires an integer expression in true
Test 5: if-else
  Semantic check passed ✅
\version "2.24.2"
\score { \new Staff { \clef treble \time 4/4 \tempo 4 = 100

  } }

  IR generation passed ✅
--- Generated LLVM IR ---
; ModuleID = 'MicroC'
source_filename = "MicroC"

@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

declare i32 @printf(i8*, ...)

define i32 @main() {
entry:
  %x = alloca i32, align 4
  br i1 true, label %then, label %else

then:                                             ; preds = %entry
  store i32 1, i32* %x, align 4
  br label %if_end

else:                                             ; preds = %entry
  store i32 0, i32* %x, align 4
  br label %if_end

if_end:                                           ; preds = %else, %then
  %x1 = load i32, i32* %x, align 4
  ret i32 %x1
}

--- End of IR ---
Test 6: non-bool if
  Test failed ❌: expected Boolean expression in 5
Test 7: while loop
  Semantic check passed ✅
\version "2.24.2"
\score { \new Staff { \clef treble \time 4/4 \tempo 4 = 100

  } }

  IR generation passed ✅
--- Generated LLVM IR ---
; ModuleID = 'MicroC'
source_filename = "MicroC"

@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

declare i32 @printf(i8*, ...)

define i32 @main() {
entry:
  %x = alloca i32, align 4
  store i32 0, i32* %x, align 4
  br label %while

while:                                            ; preds = %while_body, %entry
  %x1 = load i32, i32* %x, align 4
  %tmp = icmp slt i32 %x1, 5
  br i1 %tmp, label %while_body, label %while_end

while_body:                                       ; preds = %while
  %x2 = load i32, i32* %x, align 4
  %tmp3 = add i32 %x2, 1
  store i32 %tmp3, i32* %x, align 4
  br label %while

while_end:                                        ; preds = %while
  %x4 = load i32, i32* %x, align 4
  ret i32 %x4
}

--- End of IR ---
Test 8: non-bool while
  Test failed ❌: expected Boolean expression in 5